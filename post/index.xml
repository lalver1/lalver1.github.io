<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Luis Alvergue</title>
    <link>https://lalver1.github.io/post/</link>
    <description>Recent content in Blog on Luis Alvergue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jun 2021 19:35:00 -0600</lastBuildDate><atom:link href="https://lalver1.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tip on running Flask applications on Apache/2.4.46 (FreeBSD) using CGI</title>
      <link>https://lalver1.github.io/post/cgi_setup/</link>
      <pubDate>Wed, 09 Jun 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/cgi_setup/</guid>
      <description>After receiving several Internal Server Error from Apache and making changes to httpd-custom.conf when trying to run a Flask app using CGI, I realized that setting environment variables in your .profile does not guarantee your .cgi or .py scripts in the cgi-bin directory will have access to them. Knowing the behavior of crontab and Python scripts, I should have figured this out earlier. For example, if script.py looks something like</description>
    </item>
    
    <item>
      <title>Tip on using Environment Variables inside Python scripts</title>
      <link>https://lalver1.github.io/post/env_vars/</link>
      <pubDate>Tue, 08 Jun 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/env_vars/</guid>
      <description>After receiving several error emails from cron when trying to run the ETL pipeline I describe here, I realized that setting environment variables in your .profile does not guarantee your .sh scripts will have access to them. For example, if script.py looks like
import os sqlusr = os.getenv(&#39;SQLUSR&#39;) sqlpass = os.getenv(&#39;SQLCRD&#39;) and these variables are required for something else in the script, the following cron job will not work:
*/10 * * * * /usr/bin/python script.</description>
    </item>
    
    <item>
      <title>Simple ETL pipeline using Python, MySQL, and crontab</title>
      <link>https://lalver1.github.io/post/simple_etl/</link>
      <pubDate>Mon, 31 May 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/simple_etl/</guid>
      <description>Here&amp;rsquo;s a simple ETL (extract, transform, load) process that can be setup quickly using Python, MySQL, and crontab. For more complicated processes, it&amp;rsquo;s better to substitute crontab with a more sophisticated tool, like Airflow. This setup is a &amp;lsquo;naive&amp;rsquo; setup and I&amp;rsquo;ll probably iterate on it, but for a simple project it seems to be working.
Project Planning When planning the development of this project my objectives were:
 To only use Python, MySQL, and crontab for the ETL pipeline.</description>
    </item>
    
    <item>
      <title>Linear Algebra using NumPy</title>
      <link>https://lalver1.github.io/post/linearalg/</link>
      <pubDate>Tue, 25 Aug 2020 19:41:19 -0500</pubDate>
      
      <guid>https://lalver1.github.io/post/linearalg/</guid>
      <description>For beginner NumPy users with a linear algebra backgorund, it&amp;rsquo;s easy to understand that to define a matrix, $A=\begin{bmatrix}1&amp;amp;2\\3&amp;amp;4\end{bmatrix}$, we should use
A = np.array([[1,2],[3,4]])  since
A Out[2]: array([[1, 2], [3, 4]]) A.shape Out[3]: (2, 2)  However, how should $x=\begin{bmatrix}1\\2\end{bmatrix}$ be defined? Should we use a 1-D array
x1 = np.array([1,2]) x1 Out[4]: array([1, 2]) x1.shape Out[5]: (2,)  or a 2-D array with 1 column
x2=np.array([[1],[2]]) x2 Out[6]: array([[1], [2]]) x2.</description>
    </item>
    
    <item>
      <title>The importance of scaling features</title>
      <link>https://lalver1.github.io/post/scaling/</link>
      <pubDate>Sat, 22 Aug 2020 17:32:11 -0500</pubDate>
      
      <guid>https://lalver1.github.io/post/scaling/</guid>
      <description>If our feature vector has heterogeneous entries, such as when the entries represent different types of quantities, it is important to scale these values. For example, suppose our features consist of surface water readings from USGS, specifically:
$x_1$ is gage height, in feet, and
$x_2$ is discharge, in cubic feet per second.
Typically $x_1$ will range between 0 and 25, and $x_2$ between 0 and 20,000. If we want to build a simple autoregressive model to describe the current gage height given past height and discharge measurements, we could use the following model</description>
    </item>
    
    <item>
      <title>Recursive auto-regressive estimation</title>
      <link>https://lalver1.github.io/post/recursivear/</link>
      <pubDate>Mon, 03 Feb 2020 09:37:55 +0200</pubDate>
      
      <guid>https://lalver1.github.io/post/recursivear/</guid>
      <description>Python implementation of a RLS estimator.</description>
    </item>
    
  </channel>
</rss>
