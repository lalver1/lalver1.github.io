<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luis Alvergue</title>
    <link>https://lalver1.github.io/</link>
    <description>Recent content on Luis Alvergue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Aug 2020 23:24:32 -0500</lastBuildDate><atom:link href="https://lalver1.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing Vue&#43;Vuex&#43;Vuetify</title>
      <link>https://lalver1.github.io/post/installvue/</link>
      <pubDate>Tue, 12 Oct 2021 19:41:19 -0500</pubDate>
      
      <guid>https://lalver1.github.io/post/installvue/</guid>
      <description>This short guide will hopefully clear up how node, vue, @vue-cli, and vue plugins all work together.
Background These are the technologies needed to get a Vue single page application (SPA) going:
 Node.js is a JavaScript runtime built on Chrome&amp;rsquo;s V8 JavaScript engine. Think about it as the Python shell, you use the Python shell to run .py files. Node is used to run .js files npm is the default package manager for Node.</description>
    </item>
    
    <item>
      <title>Toy deep neural network implementation with PyTorch</title>
      <link>https://lalver1.github.io/post/basicnn/</link>
      <pubDate>Sat, 14 Aug 2021 19:41:19 -0500</pubDate>
      
      <guid>https://lalver1.github.io/post/basicnn/</guid>
      <description>Linear Algebra and Learning from Data by Gilbert Strang has the clearest explanation of deep neural networks I have seen, so far. The main reason why I say this is because it describes a neural network as a composition of Continuous Piecewise Linear (CPL) functions using linear algebra notation. In addition, the key rule to compute the parameters of these CPL functions is stochastic gradient descent using backpropagation to execute the chain rule that shows up when calculating the gradient.</description>
    </item>
    
    <item>
      <title>Conditionals on sequential data using numpy</title>
      <link>https://lalver1.github.io/post/sequential/</link>
      <pubDate>Sun, 27 Jun 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/sequential/</guid>
      <description>It is well known that vectorized operations using numpy run much faster than equivalent loop based operations. Sometimes though, a problem is easier to think about in terms of loop based operations rather than vectorized operations.
The problem Suppose you need to check for a particular sequence in a list.
import pandas as pd import numpy as np data = pd.DataFrame({ &#39;acceleration&#39;: [ 1, -3, -2, 7, -10, -3, -2, 8, 2, -1, 5, 10, 7, -3, -4, -6, -7, -9, 10, -4, -2, 3, 6, 8, 9, 12, -11, -9, -7, -3 ] })  The most straightforward way to think about it is to check for the condition using a for loop.</description>
    </item>
    
    <item>
      <title>Tip on running Flask applications on Apache/2.4.46 (FreeBSD) using CGI</title>
      <link>https://lalver1.github.io/post/cgi_setup/</link>
      <pubDate>Wed, 09 Jun 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/cgi_setup/</guid>
      <description>After receiving several Internal Server Error from Apache and making changes to httpd-custom.conf when trying to run a Flask app using CGI, I realized that setting environment variables in your .profile does not guarantee your .cgi or .py scripts in the cgi-bin directory will have access to them. Knowing the behavior of crontab and Python scripts, I should have figured this out earlier. For example, if script.py looks something like</description>
    </item>
    
    <item>
      <title>Tip on using Environment Variables inside Python scripts</title>
      <link>https://lalver1.github.io/post/env_vars/</link>
      <pubDate>Tue, 08 Jun 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/env_vars/</guid>
      <description>After receiving several error emails from cron when trying to run the ETL pipeline I describe here, I realized that setting environment variables in your .profile does not guarantee your .sh scripts will have access to them. For example, if script.py looks like
import os sqlusr = os.getenv(&#39;SQLUSR&#39;) sqlpass = os.getenv(&#39;SQLCRD&#39;) and these variables are required for something else in the script, the following cron job will not work:
*/10 * * * * /usr/bin/python script.</description>
    </item>
    
    <item>
      <title>Simple ETL pipeline using Python, MySQL, and crontab</title>
      <link>https://lalver1.github.io/post/simple_etl/</link>
      <pubDate>Mon, 31 May 2021 19:35:00 -0600</pubDate>
      
      <guid>https://lalver1.github.io/post/simple_etl/</guid>
      <description>Here&amp;rsquo;s a simple ETL (extract, transform, load) process that can be setup quickly using Python, MySQL, and crontab. For more complicated processes, it&amp;rsquo;s better to substitute crontab with a more sophisticated tool, like Airflow. This setup is a &amp;lsquo;naive&amp;rsquo; setup and I&amp;rsquo;ll probably iterate on it, but for a simple project it seems to be working.
Project Planning When planning the development of this project my objectives were:
 To only use Python, MySQL, and crontab for the ETL pipeline.</description>
    </item>
    
    <item>
      <title>Linear Algebra using NumPy</title>
      <link>https://lalver1.github.io/post/linearalg/</link>
      <pubDate>Tue, 25 Aug 2020 19:41:19 -0500</pubDate>
      
      <guid>https://lalver1.github.io/post/linearalg/</guid>
      <description>For beginner NumPy users with a linear algebra background, it&amp;rsquo;s easy to understand that to define a matrix, $A=\begin{bmatrix}1&amp;amp;2\\3&amp;amp;4\end{bmatrix}$, we should use
A = np.array([[1,2],[3,4]]) since
A Out[2]: array([[1, 2], [3, 4]]) A.shape Out[3]: (2, 2) However, how should $x=\begin{bmatrix}1\\2\end{bmatrix}$ be defined? Should we use a 1-D array
x1 = np.array([1,2]) x1 Out[4]: array([1, 2]) x1.shape Out[5]: (2,) or a 2-D array with 1 column?
x2=np.array([[1],[2]]) x2 Out[6]: array([[1], [2]]) x2.</description>
    </item>
    
    <item>
      <title>Vegetation shade from Landsat 8 satellite data</title>
      <link>https://lalver1.github.io/portfolio/gis-shade/</link>
      <pubDate>Sat, 02 May 2020 19:47:09 +0200</pubDate>
      
      <guid>https://lalver1.github.io/portfolio/gis-shade/</guid>
      <description>Landsat 8 Surface Reflectance measures the fraction of incoming solar radiation reflected from Earth&amp;rsquo;s surface to the Landsat sensor. Surface reflection measurements can be used to determine the type of surface. The Landsat 8 available measurements are shown in the table below.
 OLI and TRIS sensors
  The visible bands (bands 2-4) are 12 bit images with Digital Number (DN) values ranging between 0 and 4,095 associated with each pixel.</description>
    </item>
    
    <item>
      <title>Recursive Autoregressive Time Series Modeling</title>
      <link>https://lalver1.github.io/portfolio/modeling-ar/</link>
      <pubDate>Mon, 02 Dec 2019 16:48:00 +0200</pubDate>
      
      <guid>https://lalver1.github.io/portfolio/modeling-ar/</guid>
      <description>An auto-regressive model uses $n$ past observations to model the current value of an observed variable
$$\begin{aligned}Y[t]=-\sum_{k=1}^{n}a_kY[t-k]\end{aligned}.$$
In this case, the observed variable, $Y[t]$, is the number of traffic incidents recorded by Austin-Travis County traffic reports and publicly available at the City of Austin open data portal.
A Python script implements a recursive least squares estimator to compute the weights, $a_k$, and then generates a prediction of the numer of incidents for the next day.</description>
    </item>
    
  </channel>
</rss>
